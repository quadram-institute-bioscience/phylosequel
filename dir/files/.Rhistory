library(clusterProfiler)
setwd("/Users/tiwari/Desktop/Project/gmhscripts/tasks/BSUP-785-RNA_seq-NB/")
Ydseq = read.csv(file = "./Young_ABX_Control.csv",header = TRUE)
Odseq = read.csv(file = "./Old_ABX_Control.csv", header = TRUE)
# Filtering NA pvalue
## Young mice
Yindx <- !is.na(Ydseq$pvalue)
Ys1 <- Ydseq[Yindx,]
## Old mice
Oindx <- !is.na(Odseq$pvalue)
Os1 <- Odseq[Oindx,]
?na.omit
na.omit(Ydseq$pvalue)
Ydseq[na.omit(Ydseq$pvalue),]
Ydseq[na.omit(Ydseq$pvalue)]
Ys1$log10pvalue = log10(Ys1$pvalue)
Ys1$score = (sign(Ys1$log2FoldChange)*(-Ys1$log10pvalue))
Yranked = Ys1[order(Ys1$score, decreasing = TRUE),c(3,11)]
Yranked
?gseGO
names(Yranked) = Yranked$GeneSymbol
rownames(Yranked) = Yranked$GeneSymbol
BiocManager::install(organism, character.only = TRUE)
BiocManager::install(organism)
BiocManager::install(org.Mm.eg.db, character.only = TRUE)
BiocManager::install("org.Mm.eg.db", character.only = TRUE)
library(org.Mm.eg.db, character.only = TRUE)
library("org.Mm.eg.db")
gseGO(geneList = Yranked, ont = "BP", keyType = "SYMBOL")
gseGO(geneList = Yranked, ont = "BP", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db")
gseGO(geneList = Yranked$GeneSymbol, ont = "BP", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db")
GeneList = Yranked$GeneSymbol
gseGO(geneList = GeneList, ont = "BP", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db")
as.vector(GeneList)
is.vector(GeneList)
GeneList=sort(GeneList,decreasing = TRUE)
gseGO(geneList = GeneList, ont = "BP", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db")
keytypes("org.Mm.eg.db")
keytypes("org.Mm.eg.db")
library("org.Mm.eg.db")
library(clusterProfiler)
keytypes("org.Mm.eg.db")
keytypes(org.Mm.eg.db)
org.Mm.eg.db::
gseGO(geneList = GeneList, ont = "BP", keyType = "GENENAME", OrgDb = "org.Mm.eg.db")
gseGO(geneList = GeneList, ont = "BP", keyType = "ALIAS", OrgDb = "org.Mm.eg.db")
check_gene_id(geneList, geneSets)
columns(org.Mm.eg.db)
gseGO(geneList = GeneList, ont = "ALL", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db")
?org.Mm.eg.db
?select
select(org.Mm.eg.db, keys=keys, columns = c("SYMBOL","GENETYPE"))
keys <- head( keys(hgu95av2.db) )
keys <- head( keys(org.Mm.eg.db) )
keys
select(select(hgu95av2.db, keys=keys, columns = c("SYMBOL","GENETYPE")), keys=keys, columns = c("SYMBOL","GENETYPE"))
select(select(org.Mm.eg.db, keys=keys, columns = c("SYMBOL","GENETYPE"))
)
select(org.Mm.eg.db, keys=keys, columns = c("SYMBOL","GENETYPE"))
Ydseq$ensemblID = mapIds(org.Mm.eg.db, keys = Ydseq$GeneSymbol, column = "ENSEMBL", keytype = "SYMBOL", multiVals = "first")
View(Ydseq)
gseGO(geneList = GeneList, ont = "ALL", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db", minGSSize = 3, maxGSSize = 800, pvalueCutoff = 0.05)
gseGO(geneList = GeneList, ont = "ALL", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db", minGSSize = 3, maxGSSize = 800, pvalueCutoff = 0.05, verbose = TRUE)
View(Yranked)
?names
head(Yranked)
g = Yranked$score
names(g) = Yranked$GeneSymbol
g
gseGO(geneList = g, ont = "ALL", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db")
gseGO(geneList = g, ont = "ALL", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db", pvalueCutoff = 0.05)
gseGO(geneList = g, ont = "ALL", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db", pvalueCutoff = 0.05, by = 'DOSE')
gseGO(geneList = g, ont = "ALL", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db", pvalueCutoff = 0.05, by = 'DOSE', nPerm = 1000)
gseGO(geneList = g, ont = "ALL", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db", pvalueCutoff = 0.05, by = 'fgsea')
gseGO(geneList = g, ont = "ALL", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db", pvalueCutoff = 0.05, by = 'fgsea', minGSSize = 3, maxGSSize = 800, pvalueCutoff = 0.05, pAdjustMethod="none")
gseGO(geneList = g, ont = "ALL", keyType = "SYMBOL", OrgDb = "org.Mm.eg.db", pvalueCutoff = 0.05, by = 'fgsea', minGSSize = 3, maxGSSize = 800, pAdjustMethod="none")
gseGO(geneList = g, ont = "ALL", keyType = "SYMBOL", OrgDb = org.Mm.eg.db, pvalueCutoff = 0.05, by = 'fgsea', minGSSize = 3, maxGSSize = 800, pAdjustMethod="none")
gseGO(geneList = g, ont = "ALL", keyType = "SYMBOL", OrgDb = org.Mm.eg.db, pvalueCutoff = 0.05, by = 'fgsea', minGSSize = 3, maxGSSize = 800, pAdjustMethod="none", eps = 0)
knitr::opts_chunk$set(echo = FALSE)
setwd("/Users/tiwari/Desktop/Project/gmhscripts/tasks/BSUP-785-RNA_seq-NB/")
raw_gene_count=read.csv(file = "./raw_count_matrix/gene_count_matrix.csv",header = TRUE, row.names = "gene_id")
# Modifying column name
colnames(raw_gene_count) <- gsub(x = colnames(raw_gene_count), pattern = "X", replacement = "")
colnames(raw_gene_count) <- gsub(x = colnames(raw_gene_count), pattern = "\\.", replacement = "-")
# Filtering unknown transcripts
idx = str_detect(rownames(raw_gene_count), pattern = "\\|")
library(limma, warn.conflicts = FALSE, verbose = FALSE)
library(Glimma, warn.conflicts = FALSE, verbose = FALSE)
library(edgeR, warn.conflicts = FALSE, verbose = FALSE)
library(DESeq2, warn.conflicts = FALSE, verbose = FALSE)
library(geneplotter, warn.conflicts = FALSE, verbose = FALSE)
library(magrittr, warn.conflicts = FALSE, verbose = FALSE)
library(dplyr, warn.conflicts = FALSE, verbose = FALSE)
library(pheatmap, warn.conflicts = FALSE, verbose = FALSE)
library(RColorBrewer, warn.conflicts = FALSE, verbose = FALSE)
library("stringr")
library(tidyr)
library(plotly)
setwd("/Users/tiwari/Desktop/Project/gmhscripts/tasks/BSUP-785-RNA_seq-NB/")
raw_gene_count=read.csv(file = "./raw_count_matrix/gene_count_matrix.csv",header = TRUE, row.names = "gene_id")
# Modifying column name
colnames(raw_gene_count) <- gsub(x = colnames(raw_gene_count), pattern = "X", replacement = "")
colnames(raw_gene_count) <- gsub(x = colnames(raw_gene_count), pattern = "\\.", replacement = "-")
# Filtering unknown transcripts
idx = str_detect(rownames(raw_gene_count), pattern = "\\|")
raw_gene_count = raw_gene_count[idx,]
sample_metadata=read.csv(file = "./Metadata/metadata.csv",header = TRUE, row.names = "Sample_id")
sample_metadata = sample_metadata["Label.1"]
colnames(sample_metadata) <- "Treatment"
# Check if the samples are found in Raw gene count matrix
all(rownames(sample_metadata) %in% colnames(raw_gene_count))
# Set levels
sample_metadata$Treatment = factor(sample_metadata$Treatment, levels = c("YControl","YABx","OControl","OABx","YBDL","YABxBDL","OBDL","OABxBDL","ABx6MoBDL"))
gene_count = select(raw_gene_count,-c("1369-mice","1380-mice"))
# use in case of filtering samples
sample_metadata$name = rownames(sample_metadata)
x = c("1369-mice","1380-mice")
sample_metadata = sample_metadata[!(row.names(sample_metadata) %in% x),]
sample_metadata = select(sample_metadata,-c("name"))
sample_metadata=read.csv(file = "./Metadata/metadata.csv",header = TRUE, row.names = "Sample_id")
sample_metadata = sample_metadata["Label.1"]
colnames(sample_metadata) <- "Treatment"
# Check if the samples are found in Raw gene count matrix
all(rownames(sample_metadata) %in% colnames(raw_gene_count))
# Set levels
sample_metadata$Treatment = factor(sample_metadata$Treatment, levels = c("YControl","YABx","OControl","OABx","YBDL","YABxBDL","OBDL","OABxBDL","ABx6MoBDL"))
# ABx and BLD treatment
dds <- DESeqDataSetFromMatrix(countData = raw_gene_count, colData = sample_metadata, design = ~Treatment)
Oabx = results(dea, contrast = c("Treatment","OABx","OControl"))
dea = DESeq(dds)
Oabx = results(dea, contrast = c("Treatment","OABx","OControl"))
Oabx["group"] <- "NotSignificant" # Label everything as NotSignificant
Oabx[which(Oabx$padj < 0.1 & abs(Oabx$log2FoldChange) > 0 ),"group"] <- "Significant" # Label significant
Oabx = as.data.frame(Oabx)
## volcano plot
plot_ly(data = Oabx, x = Oabx$log2FoldChange, y = -log10(Oabx$padj), color = Oabx$group, colors = c("black","Red"), text = rownames(Oabx)) %>% layout(title ="Old Mice: ABx vs Control", yaxis = list(title = "-log10Pvalue"), xaxis = list(title = "Log2FoldChange"))
plotCounts(dea, gene = "MSTRG.19957|Alpl", intgroup = c("Treatment"))
plotCounts(dea, gene = "MSTRG.15500|Wipf1", intgroup = c("Treatment"))
plotCounts(dea, gene = "MSTRG.19097|Wdr31", intgroup = c("Treatment"))
plotCounts(dea, gene = "MSTRG.434|Trak2", intgroup = c("Treatment"))
View(sample_metadata)
mat = read.csv("/Volumes/Research-Groups/Simon-Carding/Ernie/Sumeet/vOTUs_abundance_across_different_microbes_taxa/ME_wms_Top20_family_sorted.csv", header = TRUE)
mat
# Spearman correlation between top 20 Family
library(dplyr)
library(tidyr)
colnames(mat0
)
colnames(mat)
mat %>% pivot_wider(names_from = vOTUs_family, values_from = count)
?pivot_wider
mat %>% pivot_wider(names_from = vOTUs_family, values_from = count, names_expand = TRUE)
mat %>% pivot_wider(names_from = vOTUs_family, values_from = count, names_expand = FALSE)
mat %>% pivot_wider(names_from = vOTUs_family, values_from = count, names_expand = TRUE, values_fill = 0)
df = mat %>% pivot_wider(names_from = vOTUs_family, values_from = count, names_expand = TRUE, values_fill = 0)
df
?cor
is.numeric(df)
as.numeric(df)
as.matrix(df)
mat1 = as.matrix(mat)
mat = as.numeric(mat1)
mat
mat1 = as.matrix(df)
mat1
df
rownames(df) = df$Family
row.names(df) = df$Family
df
mat1
df[0,:]
df[,:]
df[0,2:]
df[,2:]
df[,2:3]
df[,2:ncol(df)]
ncol(df)
ls
df
View(df)
mat = read.csv("/Volumes/Research-Groups/Simon-Carding/Ernie/Sumeet/vOTUs_abundance_across_different_microbes_taxa/ME_wms_Top20_family_sorted.csv", header = TRUE)
df = mat %>% pivot_wider(names_from = vOTUs_family, values_from = count, names_expand = TRUE, values_fill = 0)
View(df)
df[,2:ncol(df)]
df[,1:ncol(df)]
df[,2:ncol(df)]
df1 = df[,2:ncol(df)]
df1
row.names(df1) = df$Family
df1 = as.matrix(df[,2:ncol(df)])
df1
row.names(df1) = df$Family
df1
?cov()
?cor
?cor.test
cor(df1, method = "spearman")
cor.test(df1, method = "spearman")
cor(df1, method = "spearman")
df1
library(corrplot)
x = cor(df1, method = "spearman")
corrplot(x)
?corrplot
cor
?cor
x = cor(df1, method = "spearman", use = "everything")
x
x = cor(df1, method = "spearman", use = "pairwise.complete.obs")
x
df1
?cor.test()
df
df1
df = mat %>% pivot_wider(names_from = vOTUs_family, values_from = count, names_expand = TRUE, values_fill = 0)
df
df = mat %>% pivot_wider(names_from = Family, values_from = count, names_expand = TRUE, values_fill = 0)
df
df1 = as.matrix(df[,2:ncol(df)])
df1
cor(df1)
?cor.test
cor.test
?cor.test
df1
mat = read.csv("/Volumes/Research-Groups/Simon-Carding/Ernie/Sumeet/vOTUs_abundance_across_different_microbes_taxa/ME_wms_Top20_family_sorted.csv", header = TRUE)
df = mat %>% pivot_wider(names_from = vOTUs_family, values_from = count, names_expand = TRUE, values_fill = 0)
df1 = as.matrix(df[,2:ncol(df)])
df1
row.names(df1) = df$Family
df1
df1[0,1]
df1[0,0]
df1[1,1:4]
df1[0,1:4]
df1[1,1:4]
df1[1,1:5]
df1[1,1:9]
df1[1,1:8]
cor(df1[1,1:8])
cor(as.matrix(df1[1,1:8]))
as.matrix(df1[1,1:8])
df1[1,1:8]
x=df1[1,1:8]
x
install.packages("psych")
library(psych)
?corr.test
data("attitude")
attitude
?chisq.test
phylogroups <- read.csv("~/Desktop/Manuscripts/Hector/Updated_manuscript/Supplementary_figures/phylogroups.csv")
View(phylogroups)
?chisq.test
chisq.test(phylogroups,)
chisq.test(phylogroups)
row.names(phylogroups)
rownames(phylogroups) <- phylogroups$Phylogroups
phylogroups
phylogroups[c(Phylogroups)]
phylogroups[-c(Phylogroups)]
phylogroups
subset(phylogroups, select = -c(Phylogroups))
x = subset(phylogroups, select = -c(Phylogroups))
chisq.test(x)
library("vcd")
library(vcd)
install.packages("vcd")
library(vcd)
y =chisq.test(x)
library(corrplot)
corrplot(x$residuals, is.cor = FALSE)
corrplot(y$residuals, is.cor = FALSE)
corrplot()
?corrplot
corrplot(y$residuals, is.cor = TRUE)
corrplot(y$residuals, is.cor = FALSE)
corrplot(y$residuals, is.cor = FALSE, method = square)
corrplot(y$residuals, is.cor = FALSE, method = 'square')
corrplot(y$residuals, is.cor = FALSE)
phylogroups
x
x
t(x)
y=t(x)
chisq.test(x)
ychisq.test(x)
y=chisq.test(x)
y$residuals
x
tx = t(x)
ty=chisq.test(tx)
ty$p.value
ty$residuals
?scan
library(phyloseq)
?phyloseq
?otu_table
?pivot_wider
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages('shiny')
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "ape", "aplot", "argparse", "BH", "BiocManager", "bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "codetools", "collections", "colorspace", "commonmark", "curl", "data.table", "datamods", "dbplyr", "detect", "digest", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expm", "extrafont", "fansi", "fastmap", "findpython", "fontawesome", "forcats", "foreign", "formatR", "Formula", "fs", "gapminder", "gargle", "gdtools", "gert", "ggfittext", "ggfortify", "ggfun", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "languageserver", "lattice", "lme4", "locfit", "lubridate", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "metacoder", "mgcv", "modelr", "nlme", "openssl", "openxlsx", "pbapply", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "pryr", "ps", "psych", "purrr", "qs", "quantreg", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "reactable", "readr", "readxl", "reticulate", "RJSONIO", "rlang", "rmarkdown", "rncl", "roxygen2", "rredlist", "RSQLite", "rstatix", "Rttf2pt1", "sass", "segmented", "seqinr", "shiny", "shinyWidgets", "sourcetools", "sp", "spatial", "statmod", "stringi", "stringr", "styler", "survival", "svglite", "testthat", "tibble", "tidygraph", "tidyr", "tidytree", "tidyverse", "tinytex", "triebeard", "utf8", "V8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
library(ade4)
R
getwd()
install.packages("shiny", dependencies = TRUE)
library(nameUI <- function(id) {
ns <- NS(id)
tagList(
)
}
nameServer <- function(id) {
library(shiny)
library("shiny")
runExample("01_hello")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
library(shiny)
# See above for the definitions of ui and server
ui <- ...
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(AnnotationDbi)
runExample("02_text")
library(shiny)
library(datamods)
library(bslib)
ui <- fluidPage(
theme = bs_theme(
version = 5
),
tags$h2(i18n("Edit data"), align = "center"),
edit_data_ui(id = "id"),
verbatimTextOutput("result")
)
server <- function(input, output, session) {
edited_r <- edit_data_server(
id = "id",
data_r = reactive(demo_edit),
add = TRUE,
update = TRUE,
delete = TRUE,
download_csv = TRUE,
download_excel = TRUE,
file_name_export = "datas",
# var_edit = c("name", "job", "credit_card_provider", "credit_card_security_code"),
var_mandatory = c("name", "job")
)
output$result <- renderPrint({
str(edited_r())
})
}
if (interactive())
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
checkboxInput("header", "Header", TRUE)
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
if (is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header = input$header)
})
}
shinyApp(ui, server)
?ggsave
library(ggplot2)
?ggsave()
?theme
## Number of genes per sample
gene_count = "/Volumes/Informatics/transfer/incoming/tiwari/manu-rnaseq-1513/gene-count-matrix/genecount_bam2count.csv"
raw_gene_count=read.delim(gene_count, header=TRUE, sep = "\t", comment.char = "", check.names = FALSE, row.names = 1)
raw_gene_count=read.delim(gene_count, header=TRUE, sep = ",", comment.char = "", check.names = FALSE, row.names = 1)
head(raw_gene_count)
rowSums(raw_gene_count)
colSums(raw_gene_count)
total_genes_per_sample = colSums(raw_gene_count)
plot(total_genes_per_sample)
ggbarplot(total_genes_per_sample)
library(ggplot2)
ggbarplot(total_genes_per_sample)
ggplot(total_genes_per_sample)
total_genes_per_sample
names(total_genes_per_sample)
x$samples=names(total_genes_per_sample)
as.data.frame(x$sample) = names(total_genes_per_sample)
as.data.frame(x) = names(total_genes_per_sample)
as.data.frame(total_genes_per_sample)
total_genes_per_sample = as.data.frame(total_genes_per_sample)
total_genes_per_sample
colnames(total_genes_per_sample) <- "Count"
total_genes_per_sample
library(ggbarplot)
row.names(total_genes_per_sample)
ggplot(total_genes_per_sample, aes(fill=row.names(total_genes_per_sample), y=Count, x=row.names(total_genes_per_sample),width=0.5)) +
geom_bar(stat="identity")+
coord_flip()+
labs(x="SamplesID", y="# Genes",fill="Samples")+
ggtitle("# Gene count per sample")+
theme(
axis.text.x =element_text(colour = "black", size = 7, face = "bold"),
axis.text.y = element_text(colour = "black", face = "bold", size = 7),
legend.title = element_text(size = 7, face = "bold"),
)
getwd()
## Number of genes per sample
gene_count = "/Volumes/Informatics/transfer/incoming/tiwari/manu-rnaseq-1513/gene-count-matrix/genecount_fc.csv"
raw_gene_count=read.delim(gene_count, header=TRUE, sep = ",", comment.char = "", check.names = FALSE, row.names = 1)
colnames(total_genes_per_sample) <- "fc"
total_genes_per_sample
total_genes = colSums(raw_gene_count)
total_genes = as.data.frame(total_genes)
total_genes
colnames(total_genes) <- "bam2count"
total_genes
merge(total_genes, total_genes_per_sample, by = 'row.names', all = TRUE)
View(total_genes)
View(total_genes_per_sample)
View(raw_gene_count)
library(phyloseq)
taxa_names()
?taxa_names()
?phy_tree
setwd(/Users/tiwari/Desktop/Project/git/phylosequel/dir/files/phylObj.rds)
setwd(/Users/tiwari/Desktop/Project/git/phylosequel/dir/files/)
setwd("/Users/tiwari/Desktop/Project/git/phylosequel/dir/files/")
l
phloObj.rds = readRDS(/Users/tiwari/Desktop/Project/git/phylosequel/dir/files/phylObj.rds)
phloObj.rds = readRDS("/Users/tiwari/Desktop/Project/git/phylosequel/dir/files/phylObj.rds")
library(phyloseq)
phloObj.rds = readRDS("/Users/tiwari/Desktop/Project/git/phylosequel/dir/files/phylObj.rds")
phloObj = readRDS("/Users/tiwari/Desktop/Project/git/phylosequel/dir/files/phylObj.rds")
phyloObj = readRDS("/Users/tiwari/Desktop/Project/git/phylosequel/dir/files/phylObj.rds")
sample_names(phyloObj)
